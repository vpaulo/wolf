program = { SOI ~ statements ~ EOI }

statements = { (statement | decl_var | decl_fun | decl_struct | decl_impl)* ~ ";"? } // if semicolon is removed the parser breaks for the last option for some reason

decl_var = { "var" ~ ident ~ ( ":" ~ types )? ~ "=" ~ expression }
decl_fun = { "fn" ~ function }
decl_struct = { "struct" ~ ident ~ ( "{" ~ struct_fields ~ "}" )? ~ ";"? } 
decl_impl = { "impl" ~ ident ~ inherit? ~ "{" ~ decl_fun* ~ "}" ~ ";"? }

struct_fields = { single_field ~ ( "," ~ single_field )* }
single_field = { ident ~ ":" ~ types }
inherit = { "<-" ~ ident }

statement = { stmt_if | stmt_for | small_stmt }
stmt_if = { "if" ~ "(" ~ expression ~ ")" ~ stmt_block ~ ( "else" ~ stmt_block )? }
stmt_for = { "for" ~ ident ~ "in" ~ ident ~ stmt_block } // TODO this later
small_stmt = { stmt_expr | stmt_block | stmt_print | stmt_printLn | stmt_return }
stmt_expr = { expression ~ ";"? }
stmt_block = { "::" ~ statements ~ "end" }
stmt_print = { "print" ~ expression ~ ";" }
stmt_printLn = { "println" ~ expression ~ ";" }
stmt_return = { "return" ~ expression? ~ ";" }

expression = { expr_assign | expr_logic_or | expr_logic_and | expr_equality | expr_comparison | expr_term | expr_factor | expr_prefix | expr_call | expr_primary }
expr_assign = { (ident ~ "=" ~ expression) } // TODO object and array assign
expr_logic_or = { "or" }
expr_logic_and = { "and" }
expr_equality = { "eq" | "ne" }
expr_comparison = { "gt" | "ge" | "lt" | "le" }
expr_term = { "+" | "-" }
expr_factor = { "*" | "/" | "%" | "^" }
expr_prefix = { "not" }
expr_call = { "(" ~ ANY ~ ")" } // TODO args and object, array and super
expr_primary = { nil | bool | string | number | expr_struct | expr_array | "(" ~ expression* ~ ")" }
expr_struct = { ident ~ "{" ~ expr_struct_fields ~ "}" }
expr_struct_fields = { expr_struct_field ~ ( "," ~ expr_struct_field )* }
expr_struct_field = { ident ~  ":" ~ expression }
expr_array = { "[" ~ array ~ "]" }
//expr_var = { ident } // TODO
//expr_self = { ANY } // TODO

function = { ident ~ "(" ~ params ~ ")" ~ ( "->" ~ types )? ~ stmt_block }
params = { param ~ ( "," ~ param )* }
param = { ident ~ ( ":" ~ types )? }
array = { expression ~ ( "," ~ expression )* } 

types = { type_string | type_number | type_bool | type_nil | type_fn | type_struct | type_array }
type_string = { "string" }
type_number = { "number" }
type_bool = { "bool" }
type_nil = { "nil" }
type_fn = { "fn" }
type_struct = { ident }
type_array = { "vec<" ~ types? ~ ">" }

nil = { "nil" }
bool = { "false" | "true" }
string = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
number = ${ ASCII_DIGIT+ ~ ( "." ~ ASCII_DIGIT+ )? }

// Identifier
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

WHITESPACE = _{ " " | "\t" | NEWLINE }